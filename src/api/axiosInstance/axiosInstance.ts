import axios from 'axios'
import { refreshJwt } from './refreshJwt'

// TODO: –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
// –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ jwt expired –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –∑–∞–ø—Ä–æ—Å–æ–≤
// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
const axiosInstance = axios.create({
  baseURL: import.meta.env.VITE_APP_API_URL || 'https://back.newartspace.ru',
})

axiosInstance.interceptors.response.use(
  (response) => response,
  async (error) => {
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∫—Å–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    if (axios.isCancel(error)) return Promise.reject(error)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—ä–µ–∫—Ç–∞ response –∏ data
    if (error.response?.data?.message === 'jwt expired') {
      console.log('üîÑ [Interceptor] JWT expired, attempting to refresh token')

      const originalRequest = error.config

      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–æ–≥–æ –∂–µ –∑–∞–ø—Ä–æ—Å–∞
      if (originalRequest._retry) {
        console.log('üõë [Interceptor] Retry attempt failed, logging out user')
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥
        localStorage.removeItem('auth')
        delete axiosInstance.defaults.headers.common['Authorization']
        window.location.href = '/#/login'
        return Promise.reject(error)
      }

      originalRequest._retry = true

      try {
        console.log('üîë [Interceptor] Calling refreshJwt()')
        const newToken = await refreshJwt()

        if (newToken) {
          console.log(
            '‚úÖ [Interceptor] Token refreshed successfully, retrying original request'
          )
          originalRequest.headers['Authorization'] = `Bearer ${newToken}`
          return axiosInstance(originalRequest)
        } else {
          console.log(
            '‚ùå [Interceptor] Failed to get new token, logging out user'
          )
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥
          localStorage.removeItem('auth')
          delete axiosInstance.defaults.headers.common['Authorization']
          window.location.href = '/#/login'
          return Promise.reject(error)
        }
      } catch (refreshError) {
        console.log(
          'üí• [Interceptor] Error during token refresh, logging out user'
        )
        // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
        localStorage.removeItem('auth')
        delete axiosInstance.defaults.headers.common['Authorization']
        window.location.href = '/#/login'
        return Promise.reject(refreshError)
      }
    }
    // –î–æ–±–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫—É 401 —Å—Ç–∞—Ç—É—Å–∞
    else if (error.response?.status === 401) {
      console.log(
        'üö´ [Interceptor] 401 Unauthorized response, logging out user'
      )
      // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ 401 –æ—à–∏–±–∫–µ
      localStorage.removeItem('auth')
      delete axiosInstance.defaults.headers.common['Authorization']
      window.location.href = '/#/login'
    } else {
      console.error('‚ùå [Interceptor] Network error:', error.message)
    }
    return Promise.reject(error)
  }
)

export default axiosInstance
